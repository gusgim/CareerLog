-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create profiles table (extends auth.users)
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  full_name TEXT,
  department TEXT,
  role TEXT,
  hospital TEXT,
  phone TEXT,
  avatar_url TEXT,
  -- Ï∂îÍ∞Ä: Í∑ºÎ¨¥Ïûê Í≤ΩÎ†• Ï†ïÎ≥¥
  years_of_experience INTEGER DEFAULT 0,
  hire_date DATE,
  employee_id TEXT UNIQUE,
  is_admin BOOLEAN DEFAULT false
);

-- Create operating_rooms table (ÏàòÏà†Î∞© Ï†ïÎ≥¥)
CREATE TABLE IF NOT EXISTS public.operating_rooms (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  room_number TEXT NOT NULL UNIQUE,
  room_name TEXT NOT NULL,
  department TEXT,
  capacity INTEGER DEFAULT 1,
  specialty_type TEXT, -- 'cardiac', 'neuro', 'general', 'orthopedic', etc.
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create duty_types table (ÎìÄÌã∞ ÌÉÄÏûÖ Ï†ïÎ≥¥)
CREATE TABLE IF NOT EXISTS public.duty_types (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name TEXT NOT NULL UNIQUE,
  name_ko TEXT NOT NULL,
  description TEXT,
  color TEXT DEFAULT '#6B7280',
  required_qualifications TEXT[], -- ÌïÑÏöîÌïú ÏûêÍ≤© ÏöîÍ±¥Îì§
  max_hours_per_week INTEGER DEFAULT 40,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create qualifications table (ÏûêÍ≤©/ÍµêÏú° Ïú†Ìòï)
CREATE TABLE IF NOT EXISTS public.qualifications (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name TEXT NOT NULL UNIQUE,
  name_ko TEXT NOT NULL,
  description TEXT,
  category TEXT, -- 'education', 'certification', 'experience', 'training'
  required_for_rooms TEXT[], -- ÌïÑÏöîÌïú ÏàòÏà†Î∞©Îì§
  required_experience_years INTEGER DEFAULT 0,
  is_mandatory BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create staff_qualifications table (Í∑ºÎ¨¥ÏûêÎ≥Ñ ÏûêÍ≤©/ÍµêÏú° Ï†ïÎ≥¥)
CREATE TABLE IF NOT EXISTS public.staff_qualifications (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  qualification_id BIGINT NOT NULL REFERENCES public.qualifications(id) ON DELETE CASCADE,
  obtained_date DATE,
  expiry_date DATE,
  status TEXT DEFAULT 'active', -- 'active', 'expired', 'suspended'
  notes TEXT,
  certificate_url TEXT, -- Supabase storage URL
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, qualification_id)
);

-- Create duty_schedules table (Í∑ºÎ¨¥ Ïä§ÏºÄÏ§Ñ)
CREATE TABLE IF NOT EXISTS public.duty_schedules (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  duty_date DATE NOT NULL,
  duty_type_id BIGINT REFERENCES public.duty_types(id),
  operating_room_id BIGINT REFERENCES public.operating_rooms(id),
  shift_start TIME NOT NULL,
  shift_end TIME NOT NULL,
  status TEXT DEFAULT 'scheduled', -- 'scheduled', 'completed', 'cancelled', 'no_show'
  notes TEXT,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create logs table (main activity log)
CREATE TABLE IF NOT EXISTS public.logs (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  log_date DATE NOT NULL,
  category TEXT NOT NULL,
  subcategory TEXT,
  details TEXT NOT NULL,
  tags TEXT[],
  attachments TEXT[], -- Array of URLs pointing to Supabase Storage
  metadata JSONB DEFAULT '{}',
  duration_hours DECIMAL(5,2),
  status TEXT DEFAULT 'active', -- active, archived, deleted
  -- Ï∂îÍ∞Ä: Ïä§ÏºÄÏ§ÑÎßÅ Ï†ïÎ≥¥
  duty_schedule_id BIGINT REFERENCES public.duty_schedules(id),
  operating_room_id BIGINT REFERENCES public.operating_rooms(id)
);

-- Create categories table for predefined categories
CREATE TABLE IF NOT EXISTS public.categories (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name TEXT NOT NULL UNIQUE,
  name_ko TEXT NOT NULL,
  description TEXT,
  color TEXT DEFAULT '#6B7280',
  emoji TEXT DEFAULT 'üìù',
  subcategories TEXT[] DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create reports table for saved reports
CREATE TABLE IF NOT EXISTS public.reports (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  title TEXT NOT NULL,
  description TEXT,
  date_from DATE NOT NULL,
  date_to DATE NOT NULL,
  filters JSONB DEFAULT '{}',
  file_url TEXT,
  file_type TEXT DEFAULT 'pdf',
  status TEXT DEFAULT 'generated' -- generated, processing, failed
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.operating_rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.duty_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.qualifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.staff_qualifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.duty_schedules ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile" 
  ON public.profiles FOR SELECT 
  USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile" 
  ON public.profiles FOR UPDATE 
  USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can insert their own profile" ON public.profiles;
CREATE POLICY "Users can insert their own profile" 
  ON public.profiles FOR INSERT 
  WITH CHECK (auth.uid() = id);

-- Admin policies for profiles (Í¥ÄÎ¶¨ÏûêÎäî Î™®Îì† ÌîÑÎ°úÌïÑ Ï°∞Ìöå Í∞ÄÎä•)
DROP POLICY IF EXISTS "Admins can view all profiles" ON public.profiles;
CREATE POLICY "Admins can view all profiles" 
  ON public.profiles FOR SELECT 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Create policies for logs
DROP POLICY IF EXISTS "Users can manage their own logs" ON public.logs;
CREATE POLICY "Users can manage their own logs" 
  ON public.logs FOR ALL 
  USING (auth.uid() = user_id);

-- Admin policies for logs
DROP POLICY IF EXISTS "Admins can view all logs" ON public.logs;
CREATE POLICY "Admins can view all logs" 
  ON public.logs FOR SELECT 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Create policies for categories (public read)
DROP POLICY IF EXISTS "Categories are publicly readable" ON public.categories;
CREATE POLICY "Categories are publicly readable" 
  ON public.categories FOR SELECT 
  USING (true);

-- Create policies for reports
DROP POLICY IF EXISTS "Users can manage their own reports" ON public.reports;
CREATE POLICY "Users can manage their own reports" 
  ON public.reports FOR ALL 
  USING (auth.uid() = user_id);

-- Operating rooms policies
DROP POLICY IF EXISTS "Operating rooms are readable by authenticated users" ON public.operating_rooms;
CREATE POLICY "Operating rooms are readable by authenticated users" 
  ON public.operating_rooms FOR SELECT 
  USING (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Admins can manage operating rooms" ON public.operating_rooms;
CREATE POLICY "Admins can manage operating rooms" 
  ON public.operating_rooms FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Duty types policies
DROP POLICY IF EXISTS "Duty types are readable by authenticated users" ON public.duty_types;
CREATE POLICY "Duty types are readable by authenticated users" 
  ON public.duty_types FOR SELECT 
  USING (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Admins can manage duty types" ON public.duty_types;
CREATE POLICY "Admins can manage duty types" 
  ON public.duty_types FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Qualifications policies
DROP POLICY IF EXISTS "Qualifications are readable by authenticated users" ON public.qualifications;
CREATE POLICY "Qualifications are readable by authenticated users" 
  ON public.qualifications FOR SELECT 
  USING (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Admins can manage qualifications" ON public.qualifications;
CREATE POLICY "Admins can manage qualifications" 
  ON public.qualifications FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Staff qualifications policies
DROP POLICY IF EXISTS "Users can view their own qualifications" ON public.staff_qualifications;
CREATE POLICY "Users can view their own qualifications" 
  ON public.staff_qualifications FOR SELECT 
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can manage their own qualifications" ON public.staff_qualifications;
CREATE POLICY "Users can manage their own qualifications" 
  ON public.staff_qualifications FOR ALL 
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Admins can view all staff qualifications" ON public.staff_qualifications;
CREATE POLICY "Admins can view all staff qualifications" 
  ON public.staff_qualifications FOR SELECT 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

DROP POLICY IF EXISTS "Admins can manage all staff qualifications" ON public.staff_qualifications;
CREATE POLICY "Admins can manage all staff qualifications" 
  ON public.staff_qualifications FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Duty schedules policies
DROP POLICY IF EXISTS "Users can view their own schedules" ON public.duty_schedules;
CREATE POLICY "Users can view their own schedules" 
  ON public.duty_schedules FOR SELECT 
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Admins can manage all schedules" ON public.duty_schedules;
CREATE POLICY "Admins can manage all schedules" 
  ON public.duty_schedules FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND is_admin = true
    )
  );

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_logs_user_id ON public.logs(user_id);
CREATE INDEX IF NOT EXISTS idx_logs_log_date ON public.logs(log_date);
CREATE INDEX IF NOT EXISTS idx_logs_category ON public.logs(category);
CREATE INDEX IF NOT EXISTS idx_logs_created_at ON public.logs(created_at);
CREATE INDEX IF NOT EXISTS idx_logs_tags ON public.logs USING GIN(tags);
CREATE INDEX IF NOT EXISTS idx_logs_details_search ON public.logs USING GIN(to_tsvector('english', details));
CREATE INDEX IF NOT EXISTS idx_logs_operating_room_id ON public.logs(operating_room_id);
CREATE INDEX IF NOT EXISTS idx_logs_duty_schedule_id ON public.logs(duty_schedule_id);

CREATE INDEX IF NOT EXISTS idx_staff_qualifications_user_id ON public.staff_qualifications(user_id);
CREATE INDEX IF NOT EXISTS idx_staff_qualifications_qualification_id ON public.staff_qualifications(qualification_id);
CREATE INDEX IF NOT EXISTS idx_staff_qualifications_status ON public.staff_qualifications(status);

CREATE INDEX IF NOT EXISTS idx_duty_schedules_user_id ON public.duty_schedules(user_id);
CREATE INDEX IF NOT EXISTS idx_duty_schedules_duty_date ON public.duty_schedules(duty_date);
CREATE INDEX IF NOT EXISTS idx_duty_schedules_operating_room_id ON public.duty_schedules(operating_room_id);
CREATE INDEX IF NOT EXISTS idx_duty_schedules_duty_type_id ON public.duty_schedules(duty_type_id);

-- Create function to handle updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updated_at
CREATE TRIGGER set_updated_at_profiles
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_updated_at_logs
  BEFORE UPDATE ON public.logs
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_updated_at_reports
  BEFORE UPDATE ON public.reports
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_updated_at_operating_rooms
  BEFORE UPDATE ON public.operating_rooms
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_updated_at_staff_qualifications
  BEFORE UPDATE ON public.staff_qualifications
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_updated_at_duty_schedules
  BEFORE UPDATE ON public.duty_schedules
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- Insert default categories
INSERT INTO public.categories (name, name_ko, description, color, emoji, subcategories) VALUES
  ('clinical', 'Í∑ºÎ¨¥', 'ÏûÑÏÉÅ ÏóÖÎ¨¥ Í¥ÄÎ†® ÌôúÎèô', '#3B82F6', 'üè•', ARRAY['ÏàòÏà†Ïã§', 'ÌöåÎ≥µÏã§', 'ÌôòÏûê ÏÉÅÎã¥', 'ÏùëÍ∏â ÏÉÅÌô©', 'Î≥ëÎèô Í¥ÄÎ¶¨']),
  ('education', 'ÍµêÏú°', 'ÍµêÏú° Î∞è ÌõàÎ†® Í¥ÄÎ†® ÌôúÎèô', '#10B981', 'üìö', ARRAY['ÎÇ¥Î∂Ä ÏÑ∏ÎØ∏ÎÇò', 'Ïô∏Î∂Ä Ïª®ÌçºÎü∞Ïä§', 'Ïù∏Ï¶ù ÏãúÌóò', 'Ïò®ÎùºÏù∏ Í∞ïÏùò', 'Î©òÌÜ†ÎßÅ']),
  ('performance', 'ÏÑ±Í≥º', 'ÏÑ±Í≥º Î∞è ÏóÖÏ†Å Í¥ÄÎ†® ÌôúÎèô', '#8B5CF6', 'üèÜ', ARRAY['ÏûÑÏÉÅ Ïó∞Íµ¨', 'ÏºÄÏù¥Ïä§ Ïä§ÌÑ∞Îîî', 'ÌîÑÎ°úÏÑ∏Ïä§ Í∞úÏÑ†', 'ÌíàÏßà Ìñ•ÏÉÅ', 'ÌôòÏûê ÎßåÏ°±ÎèÑ']),
  ('innovation', 'ÌòÅÏã†', 'ÌòÅÏã† Î∞è Í∞úÏÑ† Í¥ÄÎ†® ÌôúÎèô', '#F59E0B', 'üí°', ARRAY['ÏÉàÎ°úÏö¥ Í∏∞Ïà† ÎèÑÏûÖ', 'ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í∞úÏÑ†', 'ÌåÄ ÌîÑÎ°úÏ†ùÌä∏', 'ÏïÑÏù¥ÎîîÏñ¥ Ï†úÏïà']),
  ('research', 'Ïó∞Íµ¨', 'Ïó∞Íµ¨ Î∞è ÌïôÏà† ÌôúÎèô', '#EF4444', 'üî¨', ARRAY['ÎÖºÎ¨∏ ÏûëÏÑ±', 'ÌïôÌöå Î∞úÌëú', 'Ïó∞Íµ¨ ÌîÑÎ°úÏ†ùÌä∏', 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù']),
  ('other', 'Í∏∞ÌÉÄ', 'Í∏∞ÌÉÄ ÌôúÎèô', '#6B7280', 'üìù', ARRAY['ÌöåÏùò Ï∞∏ÏÑù', 'ÌñâÏ†ï ÏóÖÎ¨¥', 'ÏûêÏõêÎ¥âÏÇ¨', 'Í∏∞ÌÉÄ'])
ON CONFLICT (name) DO UPDATE SET
  name_ko = EXCLUDED.name_ko,
  description = EXCLUDED.description,
  color = EXCLUDED.color,
  emoji = EXCLUDED.emoji,
  subcategories = EXCLUDED.subcategories;

-- Insert default operating rooms
INSERT INTO public.operating_rooms (room_number, room_name, department, capacity, specialty_type) VALUES
  ('OR1', 'ÏàòÏà†Ïã§ 1Ìò∏', 'Ïã¨Ïû•Ïô∏Í≥º', 8, 'cardiac'),
  ('OR2', 'ÏàòÏà†Ïã§ 2Ìò∏', 'Ïã†Í≤ΩÏô∏Í≥º', 6, 'neuro'),
  ('OR3', 'ÏàòÏà†Ïã§ 3Ìò∏', 'ÏùºÎ∞òÏô∏Í≥º', 6, 'general'),
  ('OR4', 'ÏàòÏà†Ïã§ 4Ìò∏', 'Ï†ïÌòïÏô∏Í≥º', 6, 'orthopedic'),
  ('OR5', 'ÏàòÏà†Ïã§ 5Ìò∏', 'ÏÇ∞Î∂ÄÏù∏Í≥º', 6, 'gynecology'),
  ('OR6', 'ÏàòÏà†Ïã§ 6Ìò∏', 'ÏÜåÏïÑÏô∏Í≥º', 6, 'pediatric'),
  ('RR1', 'ÌöåÎ≥µÏã§ A', 'ÌöåÎ≥µÏã§', 10, 'recovery'),
  ('RR2', 'ÌöåÎ≥µÏã§ B', 'ÌöåÎ≥µÏã§', 10, 'recovery')
ON CONFLICT (room_number) DO UPDATE SET
  room_name = EXCLUDED.room_name,
  department = EXCLUDED.department,
  capacity = EXCLUDED.capacity,
  specialty_type = EXCLUDED.specialty_type;

-- Insert default duty types
INSERT INTO public.duty_types (name, name_ko, description, color, required_qualifications, max_hours_per_week) VALUES
  ('operating_room', 'ÏàòÏà†Ïã§ Í∑ºÎ¨¥', 'ÏàòÏà†Ïã§ÏóêÏÑúÏùò Í∞ÑÌò∏ ÏóÖÎ¨¥', '#DC2626', ARRAY['OR_BASIC', 'CPR_CERTIFICATION'], 40),
  ('recovery_room', 'ÌöåÎ≥µÏã§ Í∑ºÎ¨¥', 'ÌöåÎ≥µÏã§ÏóêÏÑúÏùò Í∞ÑÌò∏ ÏóÖÎ¨¥', '#059669', ARRAY['RR_BASIC', 'CPR_CERTIFICATION'], 40),
  ('on_call', 'ÎãπÏßÅ Í∑ºÎ¨¥', 'ÏïºÍ∞Ñ Î∞è ÏùëÍ∏â ÏÉÅÌô© ÎåÄÏùë', '#7C3AED', ARRAY['EMERGENCY_RESPONSE', 'CPR_CERTIFICATION'], 16),
  ('day_shift', 'Ï£ºÍ∞Ñ Í∑ºÎ¨¥', 'Ï†ïÍ∑ú Ï£ºÍ∞Ñ Í∑ºÎ¨¥', '#2563EB', ARRAY['BASIC_NURSING'], 40),
  ('night_shift', 'ÏïºÍ∞Ñ Í∑ºÎ¨¥', 'Ï†ïÍ∑ú ÏïºÍ∞Ñ Í∑ºÎ¨¥', '#DC2626', ARRAY['NIGHT_DUTY', 'CPR_CERTIFICATION'], 40)
ON CONFLICT (name) DO UPDATE SET
  name_ko = EXCLUDED.name_ko,
  description = EXCLUDED.description,
  color = EXCLUDED.color,
  required_qualifications = EXCLUDED.required_qualifications,
  max_hours_per_week = EXCLUDED.max_hours_per_week;

-- Insert default qualifications
INSERT INTO public.qualifications (name, name_ko, description, category, required_for_rooms, required_experience_years, is_mandatory) VALUES
  ('OR_BASIC', 'ÏàòÏà†Ïã§ Í∏∞Î≥∏ ÏûêÍ≤©', 'ÏàòÏà†Ïã§ Í∑ºÎ¨¥Î•º ÏúÑÌïú Í∏∞Î≥∏ ÍµêÏú° Ïù¥Ïàò', 'training', ARRAY['OR1', 'OR2', 'OR3', 'OR4', 'OR5', 'OR6'], 0, true),
  ('OR_CARDIAC', 'Ïã¨Ïû•ÏàòÏà†Ïã§ ÏûêÍ≤©', 'Ïã¨Ïû•ÏàòÏà†Ïã§ Í∑ºÎ¨¥Î•º ÏúÑÌïú Ï†ÑÎ¨∏ ÍµêÏú°', 'training', ARRAY['OR1'], 6, true),
  ('OR_NEURO', 'Ïã†Í≤ΩÏàòÏà†Ïã§ ÏûêÍ≤©', 'Ïã†Í≤ΩÏàòÏà†Ïã§ Í∑ºÎ¨¥Î•º ÏúÑÌïú Ï†ÑÎ¨∏ ÍµêÏú°', 'training', ARRAY['OR2'], 5, true),
  ('RR_BASIC', 'ÌöåÎ≥µÏã§ Í∏∞Î≥∏ ÏûêÍ≤©', 'ÌöåÎ≥µÏã§ Í∑ºÎ¨¥Î•º ÏúÑÌïú Í∏∞Î≥∏ ÍµêÏú°', 'training', ARRAY['RR1', 'RR2'], 2, true),
  ('CPR_CERTIFICATION', 'CPR Ïù∏Ï¶ù', 'Ïã¨ÌèêÏÜåÏÉùÏà† Ïù∏Ï¶ù', 'certification', ARRAY[], 0, true),
  ('EMERGENCY_RESPONSE', 'ÏùëÍ∏âÏ≤òÏπò ÏûêÍ≤©', 'ÏùëÍ∏âÏÉÅÌô© ÎåÄÏùë Îä•Î†•', 'training', ARRAY[], 3, false),
  ('BASIC_NURSING', 'Í∞ÑÌò∏ÏÇ¨ Í∏∞Î≥∏ ÏûêÍ≤©', 'Í∞ÑÌò∏ÏÇ¨ Î©¥Ìóà Î∞è Í∏∞Î≥∏ Ïó≠Îüâ', 'certification', ARRAY[], 0, true),
  ('NIGHT_DUTY', 'ÏïºÍ∞ÑÍ∑ºÎ¨¥ ÏûêÍ≤©', 'ÏïºÍ∞Ñ Í∑ºÎ¨¥ ÏàòÌñâ Îä•Î†•', 'training', ARRAY[], 1, false),
  ('ANESTHESIA_ASSIST', 'ÎßàÏ∑® Î≥¥Ï°∞ ÏûêÍ≤©', 'ÎßàÏ∑®Í≥º ÏóÖÎ¨¥ Î≥¥Ï°∞ Í∞ÄÎä•', 'training', ARRAY['OR1', 'OR2', 'OR3'], 4, false),
  ('SURGICAL_TECH', 'ÏàòÏà† Í∏∞Ïà† ÏûêÍ≤©', 'Í≥†Í∏â ÏàòÏà† Î≥¥Ï°∞ Í∏∞Ïà†', 'training', ARRAY[], 5, false)
ON CONFLICT (name) DO UPDATE SET
  name_ko = EXCLUDED.name_ko,
  description = EXCLUDED.description,
  category = EXCLUDED.category,
  required_for_rooms = EXCLUDED.required_for_rooms,
  required_experience_years = EXCLUDED.required_experience_years,
  is_mandatory = EXCLUDED.is_mandatory; 